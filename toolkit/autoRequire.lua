-- function reference
local match = ngx.re.match
local setmetatable = setmetatable
-- include
local newTable = require("toolkit.common").newTable
local lfs = require("lfs")
local log = require("log.index")

local AutoRequire = newTable(0, 2)

-- regexInfo param { regex, pathKey, nameKey } for auto require
-- except param (e.g.{"filename.xxx" = true, ...}) to skip lua file of auto require
-- ...(wrappers) param for object which generated by auto require wrapping before store
function AutoRequire:new(regexInfo, except, ...)
    local instance = {}
    instance.regexInfo = regexInfo
    instance.except = except
    instance.wrappers = { ... }

    setmetatable(instance, {
        __index = self,
        __call = self.impl
    })

    return instance
end

local function fileHandle(self, fullPath, requireTable)
    local regexInfo = self.regexInfo
    local regex = regexInfo[1]
    local captures, err = match(fullPath, regex, "jo")
    if not captures then
        log.warn(fullPath, " match ", regex, " failed: ", err or "no match")
        return
    end

    local objectPath = captures[regexInfo[2]]
    local state, object = pcall(require, objectPath)
    if not state then
        log.warn("auto require ", fullPath, " failed, error: ", object)
        return
    end

    local nameKey = regexInfo[3]
    local objectName = captures[nameKey]
    -- maybe false(unmatched subpatterns will have false values in their captures table fields)
    -- see https://github.com/openresty/lua-nginx-module/blob/master/README.markdown#ngxrematch
    if not objectName then
        log.warn("invalid regex ", regex, ", error: missing  named captures '", nameKey, "'")
        return
    end

    if requireTable[objectName] then
        log.warn("duplicate objectName [", objectName, "], will override the old")
    end

    -- do wrapper
    for _, wrapper in ipairs(self.wrappers) do
        if wrapper then
            -- source for tracer wrapper and checker wrapper
            -- name for checker wrapper
            object = wrapper:wrap(object, { source = objectPath, name = objectName })
        end
    end

    requireTable[objectName] = object
end

function AutoRequire:impl(path, requireTable, full)
    -- lfs.currentdir() is work dir
    local fullDirectory = full and path or (lfs.currentdir()..path)
    local fullPath, attr, err, mode
    for fileName in lfs.dir(fullDirectory) do
        if fileName ~= "." and fileName ~= ".." then
            fullPath = fullDirectory.."/"..fileName
            attr, err = lfs.attributes(fullPath)
            if attr then
                mode = attr.mode
                if mode == "directory" then
                    -- note the useage here
                    AutoRequire.impl(self, fullPath, requireTable, true)
                elseif not self.except or self.except[fileName] ~= true then
                    fileHandle(self, fullPath, requireTable)
                end
            else
                log.warn("get file ", fileName, " attributes failed: ", err)
            end
        end
    end
end

return AutoRequire